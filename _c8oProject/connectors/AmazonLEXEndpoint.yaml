↑default: true
comment: runtime.lex.us-east-1.amazonaws.com
https: true
port: 443
server: runtime.lex.us-east-1.amazonaws.com
↓InitSignature [transactions.HttpTransaction]: 
  ↑default: true
  httpPool: global
  handlers: 
    →: |
      '/**
       * This Javascript Class implements AWS Sign V4 as Stated in this documentation:
       *
       * https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
       * It can be used to sign requests to any modern AWS API.
       *
       * Add this to your HttpTransaction : 
       *  
      	function onTransactionStarted() {
      		var AWSSign = context.httpSession.getAttribute("AWSSign");
      		if (AWSSign) {
      			AWSSign.context = context;
      			AWSSign.log     = log;
      			
      			AWSSign.region    	  		  = "us-east-1"; // the region you want to address
      			AWSSign.service    	  		  = "lex";		 // the service you want to address
      			AWSSign.AWSSecretAccessKey    = "Your AWS API Secret KEY";
      			AWSSign.AWSAccessKey    	  = "Your AWS API KEY";
      		    AWSSign.addSignatureHeader();
      		} 
      	}
       */
       
       
      
      var AWSSign = {
      	AWSSecretAccessKey : AWSSecretKey,
      	AWSAccessKey: 		 AWSKey,
      	region: 		"us-east-1",
      	service: 		"lex",
      	date: 			undefined,
      	context : 		null,
      	log : 			null,
      	
      	
      	checkConfig: function() {
      		if (this.AWSSecretAccessKey == undefined)
      			return false
      		if (this.AWSAccessKey == undefined)
      			return false
      		if (this.AWSSecretAccessKey == "")
      			return false
      		if (this.AWSAccessKey == "")
      			return false
      		return true;
      	},
      	
      	
      	/**
      	 * The Hash routine using SHA256
           */
      	hashData: function(stringToHash) {
      		hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(new java.lang.String(stringToHash).getBytes("UTF8"));
      		return hash;
      	},
      
      	/**
      	 * The signing HMac routine.
      	 * See https://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html#signature-v4-examples-java
      	 */
      	HmacSHA256: function(data, key) // String data, byte[] key ==> byte[]
      	{
      		var signatureMethod = new java.lang.String("HmacSHA256");
      		var mac = javax.crypto.Mac.getInstance(signatureMethod);
      		mac.init(new javax.crypto.spec.SecretKeySpec(key, signatureMethod));
      		var signed = mac.doFinal(new java.lang.String(data).getBytes("UTF8"));
      		return signed;
      	},
      	
      	/*
      		Utility Routine to dump in the logs an array of bytes in HEX format.
      	*/
      	logToHexString: function(label, data)
      	{
      		this.log.debug("======== " + label + ":" +
      				javax.xml.bind.DatatypeConverter.printHexBinary(data)
      		);
      	},
      	
      	/**
           *  See : https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html
      	 *  Part 1: Derive the signing Key 
      	 */
      	getSignatureKey: function(key, dateStamp, regionName, serviceName) // ==> byte[]
      	{
      		this.log.debug("##### getSignatureKey() key :" + key + " dateStamp: " + dateStamp + " regionName: " + regionName + " serviceName: " + serviceName);
      		
      		var kSecret = "AWS4" + key;
      		this.logToHexString("kSecret", new java.lang.String(kSecret).getBytes("UTF8"));
      		
      	    var kDate = this.HmacSHA256(dateStamp, new java.lang.String(kSecret).getBytes("UTF8"));
      		this.logToHexString("kDate  ", kDate);
      		
      	    var kRegion = this.HmacSHA256(regionName, kDate);
      		this.logToHexString("kRegion", kRegion);
      		
      	    var kService = this.HmacSHA256(serviceName, kRegion);
      	    this.logToHexString("kService", kService);
      	    
      	    kSigning = this.HmacSHA256("aws4_request", kService);
      	    this.logToHexString("kSigning", kSigning);
      	    
      	    return kSigning;
      	},
      	
      	/**
           *  See : https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html
      	 */
      	getStringToSign: function() 
      	{
      		if (this.date == undefined) {
      			var date = new Date().toISOString().replace(/\-/g,'''').replace(/\:/g,'''');
      			date = date.substring(0, date.indexOf(''.'')) + "Z";
      			this.date = date;
      		}
      		
      		this.scope = this.date.substring(0, this.date.indexOf(''T'')) + ''/'' + this.region + ''/'' + this.service + ''/aws4_request'';
      		var stringToSign =
      			"AWS4-HMAC-SHA256" + ''\n'' +
      			this.date + ''\n'' +
      			this.scope + ''\n'' +
      			this.hashData(this.getCanonicalRequest());
      			
      		this.log.debug ("********* stringToSign: \n" + stringToSign);
      		return stringToSign;
      	},
      	
      	
      	/**
           *  See : https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html
      	 */
      	getCanonicalRequest: function() {
      		var method = this.context.transaction.httpVerb.name();
      		
      		var URI = this.context.connector.sUrl.indexOf(''?'') != -1 ?
      			this.context.connector.sUrl.substring(this.context.connector.sUrl.indexOf(''//'')+2, this.context.connector.sUrl.indexOf(''?'')) :
      			this.context.connector.sUrl.substring(this.context.connector.sUrl.indexOf(''//'')+2);
      			
      		URI = URI.substring(URI.indexOf(''/''));
      		
      		var host = this.context.connector.sUrl.substring(this.context.connector.sUrl.indexOf(''//'')+2);
      		host = host.substring(0, host.indexOf(''/''));
      		
      		var payload = this.context.connector.postQuery + "";
      		
      		var QueryString = this.context.connector.sUrl.indexOf(''?'') != -1 ? 
      				this.context.connector.sUrl.substring(this.context.connector.sUrl.indexOf(''?'')+1) : 
      				"";
      		
      		var CanonicalRequest = 
      			method + ''\n'' +
      			URI + ''\n'' +
      			QueryString + ''\n'' +
      			"host:" + host + ''\n'' +
      			"x-amz-content-sha256:UNSIGNED-PAYLOAD" + ''\n'' +
      			"x-amz-date:" + this.date + ''\n'' +
      			"x-amz-user-agent:convertigo" + ''\n'' +			
      			"\n" +
      			"host;x-amz-content-sha256;x-amz-date;x-amz-user-agent"  + ''\n'' +
      			"UNSIGNED-PAYLOAD";
      			
      		this.log.debug("********* CanonicalRequest: \n" + CanonicalRequest);
      		return CanonicalRequest;
      	},
      	
      	
      	/**
           *  See : https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html
      	 *  Part 2: Sign the String to Sign 
      	 */
      	getSignature: function() {
      		this.log.debug("________ " + "starting get signature");
      		var signature = this.HmacSHA256(
      				this.getStringToSign(),
      				this.getSignatureKey(
      						this.AWSSecretAccessKey,
      						this.date.substring(0, this.date.indexOf("T")),
      						this.region,
      						this.service
      				)
      		);
      		signature = javax.xml.bind.DatatypeConverter.printHexBinary(signature).toLowerCase();
      		this.log.debug("________ " + "ended get signature");
      		return (signature);
      	},
      	
      	addSignatureHeader: function()
      	{
      		var Signature = this.getSignature();
      		var Authorization = "AWS4-HMAC-SHA256 Credential=" +
      			this.AWSAccessKey +''/''+ this.scope + '', SignedHeaders=host;x-amz-content-sha256;x-amz-date;x-amz-user-agent, Signature='' + Signature;
      				
      		var header = new com.twinsoft.convertigo.beans.common.XMLVector();
      		header.add("Authorization");
      		header.add(Authorization);
      		this.context.connector.httpParameters.add(header);
      		
      		header = new com.twinsoft.convertigo.beans.common.XMLVector();
      		header.add("X-Amz-Date");
      		header.add(this.date);
      		this.context.connector.httpParameters.add(header);
      
      		header = new com.twinsoft.convertigo.beans.common.XMLVector();
      		header.add("X-Amz-content-sha256");
      		header.add("UNSIGNED-PAYLOAD");
      		this.context.connector.httpParameters.add(header);
      		
      		header = new com.twinsoft.convertigo.beans.common.XMLVector();
      		header.add("X-Amz-user-agent");
      		header.add("convertigo");
      		this.context.connector.httpParameters.add(header);
      		return (Authorization);
      	}
      }
      
      // Handles the transaction start event.
      function onTransactionStarted() {
      	context.httpSession.setAttribute("AWSSign", AWSSign);
          return "cancel";
      }
      
      '
  ↓AWSKey [variables.RequestableHttpVariable-1549991131037]: 
    httpName: AWSKey
  ↓AWSSecretKey [variables.RequestableHttpVariable-1549991139534]: 
    httpName: AWSKey
    value: 
      - ↑ciphered: true
      - ↑traceable: false
      - →→: xd8e180806a1c1d83a6255212121ab827
    visibility: '-1'
↓PostContentGetAudio [transactions.HttpTransaction]: 
  dataEncoding: 1
  httpInfo: true
  httpParameters: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: Accept
            - java.lang.String: 
              - ↑value: audio/mpeg
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: Content-Type
            - java.lang.String: 
              - ↑value: text/plain; charset=UTF-8
  httpPool: global
  httpVerb: POST
  responseInCDATA: true
  subDir: bot/{botName}/alias/{botAlias}/user/{userId}/content
  handlers: 
    →: |
      '// Handles the transaction start event.
      function onTransactionStarted() {
      	var AWSSign = context.httpSession.getAttribute("AWSSign");
      	if (AWSSign) {
      		AWSSign.context = context;
      		AWSSign.log     = log;
      		if (AWSSign.checkConfig()) {
      		    AWSSign.addSignatureHeader();
      		} else { 
      			context.addTextNodeUnderRoot("error", "AWS sign keys are not configured or InitSignature transaction has not been called");
      			return "cancel";
      		}
      	} 
      }
      '
  ↓__body [variables.RequestableHttpVariable-1549987773087]: 
    httpMethod: POST
    httpName: __body
    value: hello
  ↓botName [variables.RequestableHttpVariable-1549987798783]: 
  ↓botAlias [variables.RequestableHttpVariable-1549987798785]: 
  ↓userId [variables.RequestableHttpVariable-1549987798787]: 
↓PostTextGetText [transactions.JsonHttpTransaction]: 
  httpInfo: true
  httpParameters: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: Accept
            - java.lang.String: 
              - ↑value: text/plain; charset=UTF-8
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: Content-Type
            - java.lang.String: 
              - ↑value: text/plain; charset=UTF-8
  httpPool: global
  httpVerb: POST
  subDir: bot/{botName}/alias/{botAlias}/user/{userId}/content
  handlers: 
    →: |
      '// Handles the transaction start event.
      function onTransactionStarted() {
      	var AWSSign = context.httpSession.getAttribute("AWSSign");
      	if (AWSSign) {
      		AWSSign.context = context;
      		AWSSign.log     = log;
      		if (AWSSign.checkConfig()) {
      		    AWSSign.addSignatureHeader();
      		} else { 
      			context.addTextNodeUnderRoot("error", "AWS API keys are not configured or InitSignature transaction has not been called. AWS keys can also be defined in AWSKey & AWSSecretKey symbols");
      			return "cancel";
      		}
      	} 
      }
      '
  ↓botName [variables.RequestableHttpVariable-1549643542199]: 
  ↓botAlias [variables.RequestableHttpVariable-1549643542201]: 
  ↓userId [variables.RequestableHttpVariable-1549643542203]: 
  ↓__body [variables.RequestableHttpVariable-1549643555713]: 
    httpMethod: POST
    httpName: __body
↓TestPostVanilla [transactions.JsonHttpTransaction]: 
  comment: Only For testing
  httpPool: global
  httpVerb: POST
  handlers: 
    →: |
      '
      // Handles the transaction start event.
      function onTransactionStarted() {
      	context.connector.sUrl = "https://example.amazonaws.com/";
      	var AWSSign = context.httpSession.getAttribute("AWSSign");
      	if (AWSSign) {
      		AWSSign.context = context;
      		AWSSign.log     = log;
      		
      		AWSSign.date    			  = "20150830T123600Z";
      		AWSSign.AWSSecretAccessKey    = "wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY";
      		AWSSign.AWSAccessKey    	  = "AKIDEXAMPLE";
      		AWSSign.region    	  		  = "us-east-1";
      		AWSSign.service    	  		  = "service";
      		AWSSign.contentType			  = "text/plain; charset=UTF-8";
      		
      		Auth = AWSSign.addSignatureHeader();
      		bOk = (Auth == "AWS4-HMAC-SHA256 Credential=AKIDEXAMPLE/20150830/us-east-1/service/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature=ff11897932ad3f4e8b18135d722051e5ac45fc38421b1da7b9d196a0fe09473a");
      		
      	    log.debug ("====== test is ok : " + bOk);
      	} 
      	
      	context.addTextNodeUnderRoot("TestOK", bOk);
      	context.addTextNodeUnderRoot("Auth", Auth);
          return "cancel";
      }
      '
  ↓__body [variables.RequestableHttpVariable-1549969946238]: 
    httpMethod: POST
    httpName: __body
    value: hello